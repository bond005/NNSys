/*
   Copyright 2013-2014 Бондаренко Иван Юрьевич

   Этот файл — часть NNSys.

   NNSys - свободная программа: вы можете перераспространять её и/или изменять
её на условиях Стандартной общественной лицензии GNU в том виде, в каком она
была опубликована Фондом свободного программного обеспечения; либо версии 3
лицензии, либо (по вашему выбору) любой более поздней версии.

   NNSys распространяется в надежде, что она будет полезной, но БЕЗО ВСЯКИХ
ГАРАНТИЙ; даже без неявной гарантии ТОВАРНОГО ВИДА или ПРИГОДНОСТИ ДЛЯ
ОПРЕДЕЛЕННЫХ ЦЕЛЕЙ. Подробнее см. в Стандартной общественной лицензии GNU.

   Вы должны были получить копию Стандартной общественной лицензии GNU вместе с
этой программой. Если это не так, см. http://www.gnu.org/licenses/gpl.html.
*/

#ifndef COMMANDS_UNIT_H
#define COMMANDS_UNIT_H

#include <map>
#include <string>

#include "additional_unit.h"
#include "annlib.h"

enum TExecutionMode {UNKNOWN_MODE,
                     SET_MLP_STRUCTURE, GET_MLP_STRUCTURE, SET_MLP_WEIGHT,
                     GET_MLP_WEIGHT, INITIALIZE_MLP, TRAIN_MLP, USE_MLP,
                     SHOW_TRAINSET, SEPARATE_TRAINSET,
                     CSV_TO_TRAINSET, TRAINSET_TO_CSV,
                     PROCESS_DIVERGENT_SAMPLES, REMOVE_REPEATING_SAMPLES
                    };

using namespace std;

/* Определить, какой из режимов выполнения программы выбран (см. описание
перечислимого типа TExecutionMode).
   Определение режима выполнения происходит путём поиска соответствующего
ключа в списке ключей запуска rCmdParams, сформированном путём анализа
аргументов командной строки (см. описание функции parse_command_line). */
TExecutionMode detect_mode(const TCmdParams& rCmdParams);

/* Установить структуру нейронной сети, загруженной из заданного файла.
Описание структуры представляет собой строку в виде перечня целых
положительных чисел, разделённых символами "тире":
  <целое число>-<целое число>-...-<целое число>
  Первое целое число - это количество входов в нейросеть, а остальные целые
числа со второго по последнее - это размеры слоёв нейросети с первого
по последний соответственно.
  ВХОДНЫЕ АРГУМЕНТЫ
  rCmpParams - список параметров командной строки в виде пары "ключ-значение".
Для данной функции (установки структуры нейронной сети) в списке должно быть
три ключа: "mlp", "set" и "struct". Значение ключа "mlp" определяет название
файла, а значение ключа "set" - строку с описанием новой структуры.
Ключ "struct" должен быть указан без значения, поскольку сам факт наличия этого
ключа указывает, что работа будет происходить со структурой нейронной сети.
  ВОЗВРАЩАЕМЫЙ РЕЗУЛЬТАТ
  В случае успешного завершения своей работы функция возвращает true. В случае
ошибки (например, список rCmdParams некорректен, либо не удалось создать файл
с новой нейронной сетью, либо файл с нейросетью существует, но не содержит
нейросеть, и т.п.) возвращается false, а на экран выводится сообщение об
ошибке.
  ПРИМЕЧАНИЕ
  Если заданный файл с нейросетью не существует, то он будет создан, и в него
будет записана новая созданная нейросеть. Если же файл существует и уже
содержит нейросеть, то структура этой сети будет изменена. */
bool setStructureOfMLP(const TCmdParams& rCmdParams);

/* Вывести на экран описание структуры нейросети из, загруженной из заданного
файла. В случае успешного завершения возвращается true, в случае ошибки
- false. Также в случае ошибки происходит вывод на экран соответствующего
сообщения.
  ВХОДНЫЕ АРГУМЕНТЫ
  rCmpParams - список параметров командной строки в виде пары "ключ-значение".
Для данной функции (получения информации о структурЕ нейронной сети) в списке
должно быть три ключа: "mlp", "get" и "struct". Значение ключа "mlp" определяет
название файла, а ключи "get" и "struct" должны быть указаны без значений,
поскольку факт наличия ключа "struct" показывает, что работа будет происходить
со структурой нейронной сети, а факт наличия ключа "get" - что информацию
об этой структуре нам необходимо вывести на экран (в поток stdout).
  ВОЗВРАЩАЕМЫЙ РЕЗУЛЬТАТ
  В случае успешного завершения своей работы функция возвращает true. В случае
ошибки (например, список rCmdParams некорректен, либо указанный файл с
нейронной сетью не существует, либо этот файл существует, но не содержит
нейросеть, и т.п.) возвращается false, а на экран выводится сообщение об
ошибке. */
bool getStructureOfMLP(const TCmdParams& rCmdParams);

/* Установить значение веса или группы весов заданной нейронной сети.
   ВХОДНЫЕ АРГУМЕНТЫ
   rCmpParams - список параметров командной строки в виде пары "ключ-значение".
Для данной функции (получения информации о структуре нейронной сети) в списке
должно быть три ключа: "mlp", "set" и "w".
   1. "mlp" - ключ, значением которого является название файла с нейронной
сетью.
   2. "w" - ключ, указывающий, что операция будет проводится над весом или
группой весов нейронной сети. Значением ключа является строка, содержащая
индексы изменяемого веса (весов) в виде последовательности неотрицательных
целых чисел, разделённых символом "тире".
   Если данная строка пуста, то изменяются значения всех весов сети.
   Если строка содержит только одно число, то это число - номер слоя, все веса
нейронов которого будут изменены.
   Если строка содержит два числа, то эти числа - номера слоя и нейрона в слое
соответственно. Всем весам этого нейрона будет присвоено новое значение.
   Если строка содержит три числа, то эти числа - номера слоя, нейрона в слое
и входа в нейрон соответственно. Вес указанной связи будет изменён.
   3. "set" - ключ, указывающий тип операции над весом (весами) нейросети -
установка новых величин весов. Значением этого ключа является строка,
содержащая произвольное вещественное число - новую величину веса (группы
весов).
   ВОЗВРАЩАЕМЫЙ РЕЗУЛЬТАТ
   Если функция успешно завершила свою работу, то возвращается true. В случае
ошибки возвращается false и на экран выводится сообщение о соответствующей
ошибке. */
bool setWeightOfMLP(const TCmdParams& rCmdParams);

/* Вывести на экран значение заданного веса либо значения заданной группы весов
нейросети.
   ВХОДНЫЕ АРГУМЕНТЫ
   rCmpParams - список параметров командной строки в виде пары "ключ-значение".
Для данной функции (получения информации о структуре нейронной сети) в списке
должно быть три ключа: "mlp", "set" и "w".
   1. "mlp" - ключ, значением которого является название файла с нейронной
сетью.
   2. "w" - ключ, указывающий, что операция будет проводится над весом или
группой весов нейронной сети. Значением ключа является строка, содержащая
индексы изменяемого веса (весов) в виде последовательности неотрицательных
целых чисел, разделённых символом "тире".
   Если данная строка пуста, то визуализируются значения всех весов сети.
   Если строка содержит только одно число, то это число - номер слоя, все веса
нейронов которого будут визуализированы.
   Если строка содержит два числа, то эти числа - номера слоя и нейрона в слое
соответственно. Все веса этого нейрона будут визуализированы.
   Если строка содержит три числа, то эти числа - номера слоя, нейрона в слое
и входа в нейрон соответственно. Вес указанной связи будет визуализирован.
   3. "get" - ключ, указывающий тип операции над весом (весами) нейросети -
вывод информации о значениях весов нейросети. Ключ должен быть указан без
значения.
   ВОЗВРАЩАЕМЫЙ РЕЗУЛЬТАТ
   Если функция успешно завершила свою работу, то возвращается true. В случае
ошибки возвращается false и на экран выводится сообщение о соответствующей
ошибке. */
bool getWeightOfMLP(const TCmdParams& rCmdParams);

/* Инициализировать веса нейросети из заданного файла случайными значениями.
Если функция успешно завершила свою работу, то возвращается true. В случае
ошибки возвращается false и на экран выводится сообщение о соответствующей
ошибке.
   ВХОДНЫЕ АРГУМЕНТЫ
   rCmpParams - список параметров командной строки в виде пары "ключ-значение".
Для данной функции (получения информации о структуре нейронной сети) в списке
должно быть два ключа: "mlp" (название файла с нейронной сетью) и "init" (без
значения).
   ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ
   Если функция успешно завершила свою работу, то возвращается true. В случае
ошибки возвращается false и на экран выводится сообщение о соответствующей
ошибке. */
bool initializeMLP(const TCmdParams& rCmdParams);

/* "Воспользоваться" нейронной сетью, т.е. вычислить отклики нейронной сети
на заданную последовательность входных сигналов.
   ВХОДНЫЕ АРГУМЕНТЫ
   rCmpParams - список параметров командной строки в виде пары "ключ-значение".
Для данной функции (получения информации о структуре нейронной сети) в списке
должно быть четыре ключа: "mlp", "in" и "out" и "task":
   1. "mlp" - ключ, значением которого является строка с названием файла,
содержащего используемую нейронную сеть.
   2. "in" - ключ, значением которого является строка с названием входного
файла данных, содержащего множество входных сигналов для нейронной сети. Если
данный файл содержит и множество желаемых выходных сигналов, то после
вычисления реальных откликов нейросети происходит вычисление её ошибки как
суммы квадратов разностей между реальными и желаемыми выходными сигналами.
   3. "out" - ключ, значением которого является строка с названием выходного
файла данных, предназначенного для записи выходных сигналов нейросети,
вычисленных как отклики на соответствующие входные сигналы. Если этот файл
не существует, то он будет создан, а если существует, то - перезаписан.
   4. "task" - ключ, определяющий тип задачи, решаемой нейронной сетью
(классификация либо регрессия).
   ВОЗВРАЩАЕМЫЙ РЕЗУЛЬТАТ
   Если функция успешно завершила свою работу, то возвращается true. В случае
ошибки возвращается false и на экран выводится сообщение о соответствующей
ошибке. */
bool useMLP(const TCmdParams& rCmdParams);

/* Вывести на экран информацию о структуре заданного обучающего множества
(количество примеров, размеры входных и желаемых выходных сигналов).
   ВХОДНЫЕ АРГУМЕНТЫ
   rCmpParams - список параметров командной строки в виде пары "ключ-значение".
Для данной функции (получения информации о структуре обучающего множества) в
списке должен быть ключ "trainset", значением которого является строка с
названием файла, содержащего проверяемое обучающее множество.
   ВОЗВРАЩАЕМЫЙ РЕЗУЛЬТАТ
   Если функция успешно завершила свою работу, то возвращается true. В случае
ошибки возвращается false и на экран выводится сообщение о соответствующей
ошибке. */
bool showTrainset(const TCmdParams& rCmdParams);

/* Разделить исходное обучающее множество на собственно обучающее и контрольное
подмножества.
   ВХОДНЫЕ АРГУМЕНТЫ
   rCmpParams - список параметров командной строки в виде пары "ключ-значение".
Для данной функции (разделения исходного обучающего множества на собственно
обучающее и контрольное подмножества) в списке должно быть три ключа:
"trainset", "controlset" и "r":
   1. "trainset" - ключ, значением которого является строка с названием файла,
содержащего исходное обучающее множество. В результате работы функции этот файл
перезапишется, и в него будет сохранено выделенное обучающее подмножество
исходного множества.
   2. "controlset" - ключ, значением которого является строка с названием файла,
в который будет записано выделенное контрольное (тестовое) множество.
   3. "r" - коэффициент разбиения, определяющий долю примеров, которые отойдут
в тестовое множество.
   ВОЗВРАЩАЕМЫЙ РЕЗУЛЬТАТ
   Если функция успешно завершила свою работу, то возвращается true. В случае
ошибки возвращается false и на экран выводится сообщение о соответствующей
ошибке. */
bool separateTrainset(const TCmdParams& rCmdParams);

/* Преобразовать данные из формата CSV в формат обучающего множества.
   ВХОДНЫЕ АРГУМЕНТЫ
   rCmpParams - список параметров командной строки в виде пары "ключ-значение".
Для данной функции (преобразования данных из формата CSV в формат обучающего
множества) в списке должно быть пять ключей.
   1. "csv" - ключ, значением которого является название файла с данными
в формате CSV.
   2. "trainset" - ключ, значением которого является название файла с данными
в формате обучающего множества. Если такой файл существует, то он будет
перезаписан. Если же такого файла нет, то он будет создан.
   3. "i" - ключ, значением которого является размер входного сигнала
обучающего множества, формируемого на основе данных из CSV-файла.
   4. "o" - ключ, значением которого является размер выходного сигнала
обучающего множества, формируемого на основе данных из CSV-файла.
   5. "tots" - ключ, определяющий направление преобразования - to TrainSet,
т.е. из формата CSV в формат обучающего множества.
   ВОЗВРАЩАЕМЫЙ РЕЗУЛЬТАТ
   Если функция успешно завершила свою работу, то возвращается true. В случае
ошибки возвращается false и на экран выводится сообщение о соответствующей
ошибке. */
bool CSVtoTrainset(const TCmdParams& rCmdParams);

/* Преобразовать данные из формата обучающего множества в формат CSV.
   ВХОДНЫЕ АРГУМЕНТЫ
   rCmpParams - список параметров командной строки в виде пары "ключ-значение".
Для данной функции (преобразования данных из формата CSV в формат обучающего
множества) в списке должно быть три ключа.
   1. "csv" - ключ, значением которого является название файла с данными
в формате CSV. Если такой файл существует, то он будет перезаписан. Если же
такого файла нет, то он будет создан.
   2. "trainset" - ключ, значением которого является название файла с данными
в формате обучающего множества.
   3. "tocsv" - ключ, определяющий направление преобразования - to CSV, т.е. из
формата обучающего множества в формат CSV.
   ВОЗВРАЩАЕМЫЙ РЕЗУЛЬТАТ
   Если функция успешно завершила свою работу, то возвращается true. В случае
ошибки возвращается false и на экран выводится сообщение о соответствующей
ошибке. */
bool trainsetToCSV(const TCmdParams& rCmdParams);

/* Обработать "противоречивые" примеры обучающего множества, т.е. такие, у
которых входные сигналы одинаковы, а желаемые выходные сигналы разные. Под
обработкой понимается одна из трёх операций: вывод на экран номеров
противоречивых примеров, удаление всех противоречивых примеров либо же
объединение противоречивых примеров с одинаковыми входными сигналами.
   ВХОДНЫЕ АРГУМЕНТЫ
   rCmpParams - список параметров командной строки в виде пары "ключ-значение".
Для данной функции (разделения исходного обучающего множества на собственно
обучающее и контрольное подмножества) в списке должно быть два или три ключа:
"trainset" и "divergent":
   1. "trainset" - ключ, значением которого является строка с названием файла,
содержащего анализируемое обучающее множество.
   2. "divergent" - ключ, значением которого является команда обработки
противоречивых примеров обучающего множества: "show", "remove" или "unite".
   3. "task" - ключ, указываемый только когда значением ключа "divergent"
является строка "unite", т.е. когда пользователь хочет объединить
противоречивые примеры обучающего множества; значением ключа "task" является
тип задачи, для обучения решению которой будет использоваться обучающее
множество - классификация либо регрессия.
   ВОЗВРАЩАЕМЫЙ РЕЗУЛЬТАТ
   Если функция успешно завершила свою работу, то возвращается true. В случае
ошибки возвращается false и на экран выводится сообщение о соответствующей
ошибке. */
bool processDivergentTrainSamples(const TCmdParams& rCmdParams);

/* Удалить все повторяющиейся примеры обучающего множества, т.е. такие, у
которых одинаковы входные и желаемые выходные сигналы. В каждой группе
повторяющихся примеров обучающего множества после удаления остаётся только один
пример.
   ВХОДНЫЕ АРГУМЕНТЫ
   rCmpParams - список параметров командной строки в виде пары "ключ-значение".
Для данной функции (разделения исходного обучающего множества на собственно
обучающее и контрольное подмножества) в списке должно быть два ключа:
"trainset" и "divergent":
   1. "trainset" - ключ, значением которого является строка с названием файла,
содержащего анализируемое обучающее множество.
   2. "repeat" - ключ без значения указывающий необходимость удаления
повторяющихся примеров обучающего множества.
   ВОЗВРАЩАЕМЫЙ РЕЗУЛЬТАТ
   Если функция успешно завершила свою работу, то возвращается true. В случае
ошибки возвращается false и на экран выводится сообщение о соответствующей
ошибке. */
bool deleteRepeatingTrainSamples(const TCmdParams& rCmdParams);

#endif // COMMANDS_UNIT_H

